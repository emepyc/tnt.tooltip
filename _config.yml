host: 127.0.0.1
port: 4001
safe: true
baseurl : /tnt.tooltip
api :
    - name : tooltip
      elements :
           - name : Tooltips
             preamble : |
                 <a href="http://emepyc.github.io/tnt/">TnT</a> comes with a basic tooltip library. This library is not restricted to TnT and can be used in many other scenarios, but it has not been developed as a general all-purpose, fully-featured tooltip library. See below for details. It is also possible to use TnT with other tooltip libraries too.
             example : |
                var myTooltip = function (data) {
                    var obj = {};
                    obj.header = "NAME";
                    obj.rows = [];
                    obj.rows.push ({
                        "label" : "type",
                        "value" : data.type
                    });

                    tnt.tooltip.table()
                        .width(200)
                        .call(this, obj);
                    };

                    d3.select("#container")
                        .append("svg")
                        .attr("height", 300)
                        .attr("width", 300)
                        .append("circle")
                        .datum({name:"this is me", type:"this is my type"})
                        .attr("cx", 150)
                        .attr("cy", 150)
                        .attr("r", 50)
                        .attr("fill", "red")
                        .on("click", myTooltip);

             elements :
                - name : tooltip
                  path : tnt
                  args : null
                  desc : creates a new tooltip instance
                  full : Creates a new tooltip instance that can be configured with the methods explained below. It returns a function that has to be called with <i>this</i> set to the DOM element the tooltip is attached to and the <i>data</i> to display in the tooltip. This generic tooltip object only knows how to position the tooltip in the page and creates the DOM elements appropriately, but it does not know about how to render or display the data. See below for specific tooltips that format the data in specific ways (like tables or lists)
                  example : |
                        var custom_tooltip = tnt.tooltip()
                            .width(150)
                            .fill (function (data) {
                                // The DOM element is passed as "this"
                                var container = d3.select(this);

                                var table = container
                                    .append("table")
                                    .attr("class", "tnt_zmenu")
                                    .attr("border", "solid")
                                    .style("width", custom_tooltip.width() + "px");

                                if (data.header) {
                                    table
                                        .append("tr")
                                        .attr("class", "tnt_zmenu_header")
                                        .append("th")
                                        .text(data.header);
                                }

                                if (data.body) {
                                    table
                                        .append("tr")
                                        .attr("class", "tnt_zmenu_row")
                                        .append("td")
                                        .style("text-align", "center")
                                        .html(data.body);
                                }
                            });

                - name : position
                  path : tooltip
                  args : string
                  desc : sets the relative position of the tooltip with respect to the mouse
                  full : Sets the relative position of the tooltip with respect to the mouse. Possible values are "left" and "right" (by default). If call without arguments returns the current positioning value.
                  example : |
                    var tooltip = tnt.tooltip.table()
                        .position ("left");

                - name : allow_drag
                  path : tooltip
                  args : boolean
                  desc : sets if the tooltip is <i>draggable</i> or not
                  full : Sets if the tooltip is <i>draggable</i> or not. By default, this option is set to <i>true</i>. If no argument is provided returns the current value.
                  example : |
                    var tooltip = tnt.tooltip.table()
                        .allow_drag (false);

                - name : show_closer
                  path : tooltip
                  args : boolean
                  desc : sets if the tooltip can be closed manually
                  full : Sets if the tooltip can be closed manually. If set to <i>false</i> the tooltip can not be closed directly by the user (clicking on the cross), but only programmatically calling the <a href="#close">close</a> method. By default this option is set to <i>true</i>. If called without arguments, the current value is returned.
                  example : |
                    var tooltip = tnt.tooltip.table()
                        .show_closer (false);

                - name : width
                  path : tooltip
                  args : integer
                  desc : sets the minimum width of the tooltip
                  full : Sets the minimum width of the tooltip. This width is not enforced if elements inside of the tooltip (like images) have greater <i>width</i>. The numeric argument determines the width in pixels. If called without arguments returns the current value.
                  example : |
                    var tooltip = tnt.tooltip.table()
                        .width (200) // 200 pixels

                - name : id
                  path : tooltip
                  args : integer | string
                  desc : sets an id for the tooltip
                  full : Sets an id for the tooltip. This controls the number of tooltips that can be displayed simultaneously in the same page. Everytime a tooltip is created, any previous tooltips with the same <i>id</i> are removed. For example, if the <i>id</i> is always set to the same value, everytime a tooltip is created any previous tooltip is destroyed. If called without arguments the current <i>id</i> of the tooltip is returned.
                  example : |
                    var myTooltip = function (data) {
                        var obj = {};
                        obj.header = "Circle";
                        obj.rows = [];
                        obj.rows.push ({
                            "label" : "type",
                            "value" : data.type
                        });

                        tnt.tooltip.table()
                            .width (200)
                            .id (data.type)
                            .call (this, obj);
                    };

                - name : container
                  path : tooltip
                  args : DOM_element
                  desc : specifies the DOM element to anchor the tooltip
                  full : Species the DOM element to anchor the tooltip. By default the tooltip is anchored in the first <i>div</i> element found up the DOM hierarchy is used, by using this method it is possible to define an alternative DOM element. Remember that the anchor element has to be <i>"relative" positioned</i>
                  example : |
                        tnt.tooltip.table()
                          .width (200)
                          .id(data.type)
                          .container(document.getElementById("mycontainer")); // <div id=mycontainer style="position:relative"></div>
                          .call(...);

                - name : fill
                  path : tooltip
                  args : callback
                  desc : specifies how to render the tooltip content
                  full : This method specifies the how to render the tooltip content. The callback is run passing the container element as <i>this</i> and the data obj as its argument. See <a href="#table">tnt.tooltip.table</a> or <a href="#plain">tnt.tooltip.plain</a> for examples of use of this method. If called without arguments, the current callback is returned
                  example : |
                        var custom_tooltip = tnt.tooltip()
                            .width(150)
                            .fill (function (data) {
                                // The DOM element is passed as "this"
                                var container = d3.select(this);

                                var table = container
                                    .append("table")
                                    .attr("class", "tnt_zmenu")
                                    .attr("border", "solid")
                                    .style("width", custom_tooltip.width() + "px");

                                if (data.header) {
                                    table
                                        .append("tr")
                                        .attr("class", "tnt_zmenu_header")
                                        .append("th")
                                        .text(data.header);
                                }

                                if (data.body) {
                                    table
                                        .append("tr")
                                        .attr("class", "tnt_zmenu_row")
                                        .append("td")
                                        .style("text-align", "center")
                                        .html(data.body);
                                }
                            });


                        d3.select("#container")
                            .append("svg")
                            .attr("width", 300)
                            .attr("height", 300)
                            .append("circle")
                            .datum({
                                header:"this is the header",
                                body:"this is the body"
                            })
                            .attr("cx", 150)
                            .attr("cy", 150)
                            .attr("r", 50)
                            .attr("fill", "red")
                            .on("click", function (d) {
                                custom_tooltip.call(this, d);
                            });

                - name : plain
                  path : tnt.tooltip
                  args : null
                  desc : tooltips for non-structured data
                  full : Tooltips for non-structured data. Returns a tooltip that accepts a data object consisting of two fields, <i>header</i> and <i>body</i>. The former typically contains a string that will be used as the header of the tooltip. The latter will be rendered as the body of the tooltip and centered. The <i>body</i> can contain any valid html. The returned <i>tooltip</i> also has all the methods previously described for general <a href="#tooltip">tooltips</a>.
                  example: |
                    tnt.tooltip.plain()
                        .id(data.name)
                        .width(150)
                        .call(element, {
                            header: "Help"
                            body: "<img src=myImg.png width=30/>"
                        });

                - name : table
                  path : tnt.tooltip
                  args : null
                  desc : tooltip rendered as a table
                  full : Tooltip rendered as a table. Returns a tooltip that accepts a data object that is expected to have two fields, <i>header</i> that typically contains a string that is display at the top of the tooltip and <i>rows</i> that contains an array of objects each containing a <i>label</i> and <i>value</i> field. These object data is displayed in the tooltip in a form of a 2-columns table. If a row object has an empty <i>value</i> the corresponding <i>label</i> will span the two columns of the row. The returned <i>tooltip</i> also has all the methods previously described for general <a href=#tooltip>tooltips</a>.
                  example : |
                    var myTooltip = function (data) {
                        var obj = {};
                        obj.header = "Circle";
                        obj.rows = [];
                        obj.rows.push ({
                            "label" : "type",
                            "value" : data.type
                        });

                        tnt.tooltip.table()
                            .width (200)
                            .id (data.type)
                            .call (this, obj);
                    };
